// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  niches        Niche[]
  strategies    Strategy[]
  accounts      Account[]
  sessions      Session[]
  websites      Website[]
}

model Niche {
  id            String    @id @default(cuid())
  name          String
  description   String
  demographics  String[]
  requirements  Json
  topChannels   String[]
  metrics       Json
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  strategies    Strategy[]
}

model Strategy {
  id            String    @id @default(cuid())
  title         String
  description   String
  steps         Json
  metrics       Json
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  nicheId       String
  niche         Niche     @relation(fields: [nicheId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Website {
  id          String   @id @default(cuid())
  url         String
  name        String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pageViews   PageView[]
  visitors    Visitor[]
}

model PageView {
  id          String   @id @default(cuid())
  websiteId   String
  visitorId   String
  path        String
  duration    Int
  referrer    String?
  createdAt   DateTime @default(now())
  website     Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  visitor     Visitor  @relation(fields: [visitorId], references: [id], onDelete: Cascade)
}

model Visitor {
  id          String   @id @default(cuid())
  websiteId   String
  fingerprint String
  country     String?
  device      String?
  browser     String?
  os          String?
  createdAt   DateTime @default(now())
  website     Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  pageViews   PageView[]

  @@unique([websiteId, fingerprint])
} 